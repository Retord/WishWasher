"""
Script to analyze messages and determine friend relations
"""

import fb
import requests
import string

def bday_wish(message):
	""" Analyze message to ascertain if it is a birthday wish
	    Params:
		       meassage: The message received from FB friend

		Note: This is a temporary hack. Hope to make it better soon via statistical NLP
	"""

	#assert type(message) == str
	
	keywords = [["birthday", "happy", "best", "memorable", "awesome", "fantastic"], ["returns", "many", "bless"]]
	corrections = {"bday":"birthday", "hpy":"happy"}
	
	s = ''.join(c for c in message if c not in string.punctuation)
	l = s.lower().split()

	l = [corrections[x] if x in corrections.keys() else x for x in l]

	count = 0
	
	for p in  keywords:
		for x in l:
			if x in p:
				count += 1

	if count >= 1:
		return True
	else:
		return False


def get_relation(friend):
	""" Determine the relationship between you and the friend specified """

	relations = requests.get("https://graph.facebook.com/me/family", params={'access_token':fb.AUTH_TOKEN}).json()["data"]

	
	rel_list = [x["name"] for x in relations]
	
	relation = ''
	if friend["name"] in rel_list:
		relation = relations[rel_list.index(friend["name"])]["relationship"]
		
	return relation



def get_message(post, friend):
	""" Create the message to be posted as a reply
	    Input:
		     Dictionary representing FB wall post
			 Dictionary representing FB friend who posted

		Returns: A reply message to be posted in the comments

		IMP NOTE: This function is very user specific. You are advised to edit this to get it to work for you properly.
	"""
	
	
	relation = get_relation(friend)
	message = "Thank you very very much, "
	honorific = ""
	
	# Map of relation to message content
	relations = {"mother":"Mom", "father":"Dad", "sister":"Tinki", "brother":"bro"}

	# List of lists of relatives where each list is a specific type of relative
	# [Maternal_aunts, Maternal_uncles, Paternal_aunts, Paternal_uncles, Maternal_cousin_sisters, Maternal_cousin_brothers, Paternal_cousin_sisters, Paternal_cousin_brothers]
	people = [ ["Geeta", "Juli"], [], ["Shubhra"], [], ["Janica"], [], ["Pallavi", "Nikita", "Ankita"], ["Ashish", "Shobhit"] ]

	# The above lists should be edited as required
	
	
	if relation:

		if relation in relations.keys():
			message = message + relations[relation]

		else:
			
			for (i, l) in enumerate(people):
				
				if friend["first_name"] in l:
					
					if i == 0:
						honorific = "maushi"
					elif i == 1:
						honorific = "uncle"
					elif i == 2:
						honorific = "taiji"
					elif i == 3:
						honorific = "taoji"
					elif i == 4:
						honorific = "baie"
					elif i == 5:
						honorific = "anna"
					elif i == 6:
						honorific = "di"
					elif i == 7:
						honorific = "bhaiya"
						
				break
			
			message = message + friend["first_name"] + honorific

	else:

		message = message + friend["first_name"]
		
		

	message = message + "! :D \n\n(Reply generated by WishWasher bot. This does not mean I am ungrateful for your kind wishes)"

	return message
